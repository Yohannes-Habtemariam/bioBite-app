{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/flys/DCI_final/front-end/src/views/cartpage/CartPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MyContext } from \"../../App\";\nimport './cartPage.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CartPage = () => {\n  _s();\n\n  const {\n    cart,\n    setCart,\n    user,\n    setOrders,\n    orders,\n    meals\n  } = useContext(MyContext);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(\"\");\n  const [placedOrder, setPlacedOrder] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [userData, SetUserData] = useState(null);\n  useEffect(() => {\n    const sum = cart.reduce((acc, item) => {\n      acc += item.price * item.quantity;\n      return acc;\n    }, 0);\n    setTotal(sum);\n  }, [cart]);\n  /*\n  const changeQuantity = (e, meal) => {\n    const item = cart.find((elem) => elem._id === meal._id);\n    item.quantity = Number(e.target.value);\n    setCart([...cart]);\n    console.log(item);\n  };\n   const getAddress = (e) => {\n      e.preventDefault();\n      let userAddress = {\n        house: e.target.hn.value,\n        street: e.target.stn.value,\n        postcode: e.target.pc.value,\n        city: e.target.city.value,\n        country: e.target.country.value,\n      };\n      console.log(userAddress);\n      e.target.reset();\n    };\n   user enters card number, date, 3dig - click confirm order\n  last 4 dig card is stored in database order\n  stripe sandbox to process payment\n  const payment = (e) => {\n    e.preventDefault()\n    ??setCardNum =cardNumber.slice(-4)\n  }\n   const placeOrder = () => {\n    if (!user) {\n      navigate(\"/register\");\n    } else if (cart.length !== 0) {\n       fetch(`http://localhost:3001/users/${user.id}/order`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          usersMeals: cart.map((item) => item._id),\n          //CardNumLast4Dig:\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => {\n          if (result.success) {\n            console.log(result);\n            fetch(`http://localhost:3001/order/${result.data._id}`)\n              .then((res) => res.json())\n              .then((final) => {\n                console.log(final);\n                if (final.success) {\n                  console.log(final);\n                  setOrders([...orders, ...final.data.usersMeals]);\n                }\n              });\n            setPlacedOrder(true);\n            setUser(result.data.userId);\n            setCart([]);\n          } else {\n            alert(result.message);\n          }\n        })\n        .catch((err) => console.log(err.message));\n    } else {\n      alert(\"please select any item from our meal list\");\n    }\n  };\n   */\n  // * Yohannes and Sameer modify the placeOrder function \n  // ===========================================================================\n  // The customer placing an order in the front end and post it in the back end\n  //============================================================================\n\n  const placeOrder = async () => {\n    if (!user) {\n      navigate(\"/register\");\n    } else if (cart.length < 3) {\n      alert(\"Minimum order is three meals\");\n    } else {\n      const newOrder = {\n        meals: cart.map(item => item._id),\n        total: total,\n        userId: user.id\n      };\n      console.log(user);\n      const settings = {\n        method: \"POST\",\n        body: JSON.stringify(newOrder),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const response = await fetch(`http://localhost:3001/orders`, settings);\n      const result = await response.json();\n\n      try {\n        if (response.ok) {\n          setOrders([...orders, result.data._id]);\n          setCart([]);\n          setPlacedOrder(true);\n        } else {\n          throw new Error(result.message);\n        }\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n  }; // * Yohannes and Sameer modify the placeOrder function \n  // ===========================================================================\n  // Deleting a single ordered meal by the customer\n  //============================================================================\n\n\n  const deleteSingleOrderedMeal = async event => {\n    const selectedMealId = event.target.parentElement.id;\n    const cartItem = cart.filter(cartItem => cartItem._id != selectedMealId);\n    setCart(cartItem);\n    const settings = {\n      method: \"DELETE\"\n    };\n    console.log(selectedMealId);\n    const response = await fetch(`http://localhost:3001/orders/${selectedMealId}`, settings);\n    const result = await response.json();\n\n    try {\n      if (response.ok) {\n        setOrders(result.meals);\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  }; // ===========================================================================\n  // Customer clicks pay on success page to load stripe payment (order already in database)\n  //============================================================================\n\n\n  const stripe = async () => {\n    const pay = {\n      total: total\n    };\n    console.log(pay);\n    const settings = {\n      method: \"POST\",\n      body: JSON.stringify(pay),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await fetch(`http://localhost:3001/payment`, settings);\n    const result = await response.json();\n\n    try {\n      if (response.ok) {//STRIPE - taken from Youtube tutorial\n        // .then(({ url }) => {   console.log(url) })\n        // .then(({ url }) => {   window.location = url })\n      } else {\n        throw new Error(result.message);\n      }\n    } catch (err) {\n      alert(err.message);\n    }\n  }; //ternary operator: 1. placed order===true - show success page | 2. placed order===false - show delete meals option\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: placedOrder ?\n    /*#__PURE__*/\n    // success page:\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Order  Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"This is your choice of meals:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), cart.map(meal => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: meal.img,\n            width: \"100\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: meal.mealName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [meal.price, \"\\u20AC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this)]\n        }, meal._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"order address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: userData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [userData.firstName, \" \", userData.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [userData.street, \" \", userData.houseNo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.zipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 19\n          }, this)]\n        }, userData._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Total to pay:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"total\",\n        children: [\" \", cart.length > 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" Total : \", total, \"\\u20AC  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 33\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stripe,\n        children: \"pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // delete page\n    _jsxDEV(\"div\", {\n      className: \"ordered-meals-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your choice this week: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), cart.map(meal => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: deleteSingleOrderedMeal,\n          className: \"ordered-meals\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: meal.img,\n              width: \"100\",\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 23\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: meal.mealName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [meal.price, \"\\u20AC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: meal._id,\n            className: \"deleteOrderedMeal\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 68\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this)]\n        }, meal.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"total\",\n        children: [\" \", cart.length > 0 && /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\" Total : \", total, \"\\u20AC  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 33\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Address: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: userData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [userData.firstName, \" \", userData.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [userData.street, \" \", userData.houseNo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.zipCode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: userData.phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, userData._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: placeOrder,\n        children: \"checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartPage, \"JBTks5s0yb3qwgWZrHQKXqSapUM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CartPage;\nexport default CartPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useNavigate","MyContext","CartPage","cart","setCart","user","setOrders","orders","meals","navigate","message","setMessage","placedOrder","setPlacedOrder","total","setTotal","userData","SetUserData","sum","reduce","acc","item","price","quantity","placeOrder","length","alert","newOrder","map","_id","userId","id","console","log","settings","method","body","JSON","stringify","headers","response","fetch","result","json","ok","data","Error","err","deleteSingleOrderedMeal","event","selectedMealId","target","parentElement","cartItem","filter","stripe","pay","meal","img","mealName","firstName","lastName","street","houseNo","city","zipCode","phone"],"sources":["/home/user/Desktop/flys/DCI_final/front-end/src/views/cartpage/CartPage.jsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MyContext } from \"../../App\";\nimport './cartPage.scss';\n\nconst CartPage = () => {\n  const { cart, setCart, user, setOrders, orders, meals } =\n    useContext(MyContext);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(\"\");\n  const [placedOrder, setPlacedOrder] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [userData, SetUserData] = useState(null);\n\n  useEffect(() => {\n    const sum = cart.reduce((acc, item) => {\n      acc += item.price * item.quantity;\n      return acc;\n    }, 0);\n    setTotal(sum);\n  }, [cart]);\n\n\n  /*\n  const changeQuantity = (e, meal) => {\n    const item = cart.find((elem) => elem._id === meal._id);\n    item.quantity = Number(e.target.value);\n    setCart([...cart]);\n    console.log(item);\n  };\n\n  const getAddress = (e) => {\n      e.preventDefault();\n      let userAddress = {\n        house: e.target.hn.value,\n        street: e.target.stn.value,\n        postcode: e.target.pc.value,\n        city: e.target.city.value,\n        country: e.target.country.value,\n      };\n      console.log(userAddress);\n      e.target.reset();\n    };\n\n  user enters card number, date, 3dig - click confirm order\n  last 4 dig card is stored in database order\n  stripe sandbox to process payment\n  const payment = (e) => {\n    e.preventDefault()\n    ??setCardNum =cardNumber.slice(-4)\n  }\n\n  const placeOrder = () => {\n    if (!user) {\n      navigate(\"/register\");\n    } else if (cart.length !== 0) {\n\n      fetch(`http://localhost:3001/users/${user.id}/order`, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          usersMeals: cart.map((item) => item._id),\n          //CardNumLast4Dig:\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => {\n          if (result.success) {\n            console.log(result);\n            fetch(`http://localhost:3001/order/${result.data._id}`)\n              .then((res) => res.json())\n              .then((final) => {\n                console.log(final);\n                if (final.success) {\n                  console.log(final);\n                  setOrders([...orders, ...final.data.usersMeals]);\n                }\n              });\n            setPlacedOrder(true);\n            setUser(result.data.userId);\n            setCart([]);\n          } else {\n            alert(result.message);\n          }\n        })\n        .catch((err) => console.log(err.message));\n    } else {\n      alert(\"please select any item from our meal list\");\n    }\n  };\n\n  */\n\n  // * Yohannes and Sameer modify the placeOrder function \n\n  // ===========================================================================\n  // The customer placing an order in the front end and post it in the back end\n  //============================================================================\n  const placeOrder = async () => {\n    if (!user) {\n      navigate(\"/register\");\n\n    } else if (cart.length < 3) {\n      alert(\"Minimum order is three meals\")\n\n\n    } else {\n      const newOrder = {\n        meals: cart.map((item) => item._id),\n        total: total,\n        userId: user.id\n      }\n\n      console.log(user)\n\n      const settings = {\n        method: \"POST\",\n        body: JSON.stringify(newOrder),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n\n      const response = await fetch(`http://localhost:3001/orders`, settings)\n      const result = await response.json()\n\n      try {\n        if (response.ok) {\n          setOrders([...orders, result.data._id]);\n          setCart([]);\n          setPlacedOrder(true)\n        } else {\n          throw new Error(result.message)\n        }\n      } catch (err) {\n        alert(err.message)\n      }\n    }\n  }\n\n  // * Yohannes and Sameer modify the placeOrder function \n\n  // ===========================================================================\n  // Deleting a single ordered meal by the customer\n  //============================================================================\n\n  const deleteSingleOrderedMeal = async event => {\n\n    const selectedMealId = event.target.parentElement.id;\n    const cartItem = cart.filter((cartItem) => cartItem._id != selectedMealId)\n    setCart(cartItem)\n    const settings = {\n      method: \"DELETE\"\n    };\n\n    console.log(selectedMealId)\n\n    const response = await fetch(`http://localhost:3001/orders/${selectedMealId}`, settings);\n    const result = await response.json();\n\n    try {\n      if (response.ok) {\n        setOrders(result.meals)\n      } else {\n        throw new Error(result.message)\n      }\n    } catch (err) {\n      alert(err.message)\n    }\n  };\n\n  // ===========================================================================\n  // Customer clicks pay on success page to load stripe payment (order already in database)\n  //============================================================================\n  const stripe = async () => {\n    const pay = {\n      total: total\n    }\n    console.log(pay)\n    const settings = {\n      method: \"POST\",\n      body: JSON.stringify(pay),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n    const response = await fetch(`http://localhost:3001/payment`, settings)\n    const result = await response.json()\n    try {\n      if (response.ok) {\n        //STRIPE - taken from Youtube tutorial\n        // .then(({ url }) => {   console.log(url) })\n        // .then(({ url }) => {   window.location = url })\n      } else {\n        throw new Error(result.message)\n      }\n    } catch (err) {\n      alert(err.message)\n    }\n  }\n  //ternary operator: 1. placed order===true - show success page | 2. placed order===false - show delete meals option\n  return (\n    <div>\n      {placedOrder ? (\n        // success page:\n        <>\n          <h2>Order  Summary</h2>\n          <h3>This is your choice of meals:</h3>\n          {/* meals not showing */}\n          {cart.map((meal) => {\n            return (\n              <div key={meal._id}>\n                <img src={meal.img} width=\"100\" alt=\"\" />\n                <h4>{meal.mealName}</h4>\n                <p>{meal.price}€</p>\n              </div>\n            );\n          })}\n          <h3>order address:</h3>\n          {/* address not showing */}\n          <div>\n            {\n              userData &&\n              (\n                <div key={userData._id}>\n                  <p>{userData.firstName} {userData.lastName}</p>\n                  <p>{userData.street} {userData.houseNo}</p>\n                  <p>{userData.city}</p>\n                  <p>{userData.zipCode}</p>\n                  <p>{userData.phone}</p>\n                </div>\n              )\n            }\n          </div>\n          <h3>Total to pay:</h3>\n          {/* total not showing */}\n          <div className=\"total\">\n            {\" \"}\n            {cart.length > 0 && <h2> Total : {total}€  </h2>}{\" \"}\n          </div>\n          {/* click pay=>500error */}\n          <button onClick={stripe}>pay</button>\n        </>\n      ) : (\n        // delete page\n        <div className=\"ordered-meals-container\">\n          <h3>Your choice this week: </h3>\n          {cart.map((meal) => {\n            return (\n              <div key={meal.id} onClick={deleteSingleOrderedMeal} className=\"ordered-meals\">\n                <div> <img src={meal.img} width=\"100\" alt=\"\" /> </div>\n                <h4>{meal.mealName}</h4>\n                <p>{meal.price}€</p>\n                <div id={meal._id} className=\"deleteOrderedMeal\" > <span>X</span></div>\n              </div>\n            );\n          })}\n          <div className=\"total\">\n            {\" \"}\n            {cart.length > 0 && <h2> Total : {total}€  </h2>}{\" \"}\n          </div>\n          <h3>{message}</h3>\n          {/* address not showing */}\n          <h3>Address: </h3>\n            <div>\n        {\n          userData &&\n          (\n            <div key={userData._id}>\n              <p>{userData.firstName} {userData.lastName}</p>\n              <p>{userData.street} {userData.houseNo}</p>\n              <p>{userData.city}</p>\n              <p>{userData.zipCode}</p>\n              <p>{userData.phone}</p>\n              {/* </h3> <button  onClick={ addAddress}>Add Address</button> */}\n            </div>\n          )\n             }\n      </div>\n          {/* \n          <form onSubmit={getAddress}>\n            <label>\n              House No.\n              <input type=\"number\" name=\"hn\" min={1} />\n            </label>\n            <br />\n            <label>\n              Street No.\n              <input type=\"number\" name=\"stn\" />\n            </label>\n            <br />\n            <label>\n              City.\n              <input type=\"text\" name=\"city\" />\n            </label>\n            <br />\n            <label>\n              Postal Code.\n              <input type=\"number\" name=\"pc\" />\n            </label>\n            <br />\n            <label>\n              Country\n              <input type=\"text\" name=\"country\" />\n            </label>\n            <br />\n            <input type=\"submit\" value=\"add\" />\n          </form> \n          */}\n\n          {/* onclick loads success page with pay button. Success page will always show until user pays */}\n          <button onClick={placeOrder}>checkout</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CartPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}